# Generated by Django 5.2.5 on 2025-08-27 07:58

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('partners', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ImportSourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="Short machine-readable code (e.g., 'file', 'api').", max_length=20, unique=True)),
                ('description', models.CharField(help_text='Human-readable description of the source type.', max_length=100)),
            ],
            options={
                'verbose_name': 'Import Source Type',
                'verbose_name_plural': 'Import Source Types',
            },
        ),
        migrations.CreateModel(
            name='ImportGlobalDefaultSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255)),
                ('valid_from', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='global_default_sets', to='core.organization')),
            ],
            options={
                'verbose_name': 'Import Global Default Set',
                'verbose_name_plural': 'Import Global Default Sets',
            },
        ),
        migrations.CreateModel(
            name='ImportRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_file', models.CharField(blank=True, help_text='Absolute or relative path to the source file that was imported.', max_length=500, null=True)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default='running', help_text='running, success, failed', max_length=20)),
                ('total_records', models.IntegerField(blank=True, help_text='Number of raw records fetched in this run.', null=True)),
                ('is_processed', models.BooleanField(default=False, help_text='Marks whether this run has already been processed into ERP tables.')),
                ('processed_at', models.DateTimeField(blank=True, help_text='Timestamp when raw records were processed into ERP tables.', null=True)),
                ('supplier', models.ForeignKey(help_text='Supplier this import run belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='import_runs', to='partners.supplier')),
                ('source_type', models.ForeignKey(help_text='Type of source for this import (e.g., file, API).', on_delete=django.db.models.deletion.PROTECT, related_name='import_runs', to='imports.importsourcetype')),
            ],
            options={
                'verbose_name': 'Import Run',
                'verbose_name_plural': 'Import Runs',
            },
        ),
        migrations.CreateModel(
            name='ImportErrorLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_number', models.IntegerField(blank=True, null=True)),
                ('error_message', models.TextField()),
                ('payload', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('import_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='error_logs', to='imports.importrun')),
            ],
            options={
                'verbose_name': 'Import Error Log',
                'verbose_name_plural': 'Import Error Logs',
            },
        ),
        migrations.CreateModel(
            name='ImportGlobalDefaultLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_path', models.CharField(max_length=255)),
                ('default_value', models.JSONField(blank=True, null=True)),
                ('transform', models.CharField(blank=True, max_length=50, null=True)),
                ('is_required', models.BooleanField(default=False)),
                ('set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='global_default_lines', to='imports.importglobaldefaultset')),
            ],
            options={
                'verbose_name': 'Import Global Default Line',
                'verbose_name_plural': 'Import Global Default Lines',
                'constraints': [models.UniqueConstraint(fields=('set', 'target_path'), name='uq_globaldefaultline_set_target')],
            },
        ),
        migrations.CreateModel(
            name='ImportRawRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_number', models.IntegerField(help_text='Sequential line number within the import run (starting at 1).')),
                ('payload', models.JSONField(help_text='Full raw payload from the external source (JSON or converted dict).')),
                ('supplier_product_reference', models.CharField(blank=True, db_index=True, help_text="Supplier's article reference (e.g., supplier SKU or manufacturer number) for fast lookup.", max_length=255, null=True)),
                ('product_is_imported', models.BooleanField(default=False, help_text='True if this record has been successfully imported into ERP tables.')),
                ('price_is_imported', models.BooleanField(default=False, help_text='True if this record has been successfully imported into price tables.')),
                ('product_imported_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was imported.', null=True)),
                ('price_imported_at', models.DateTimeField(blank=True, help_text='Timestamp when pricing was imported.', null=True)),
                ('is_product_import_error', models.BooleanField(default=False, help_text='True if processing this record failed.')),
                ('is_price_import_error', models.BooleanField(default=False, help_text='True if processing this record failed.')),
                ('error_message_product_import', models.TextField(blank=True, help_text='Detailed error message if processing failed.', null=True)),
                ('error_message_price_import', models.TextField(blank=True, help_text='Detailed error message if processing failed.', null=True)),
                ('retry_count_product_import', models.PositiveIntegerField(default=0, help_text='Number of times this record has been retried for processing.')),
                ('retry_count_price_import', models.PositiveIntegerField(default=0, help_text='Number of times this record has been retried for processing.')),
                ('import_run', models.ForeignKey(help_text='Import run this record belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='raw_records', to='imports.importrun')),
            ],
            options={
                'verbose_name': 'Import Raw Record',
                'verbose_name_plural': 'Import Raw Records',
                'indexes': [models.Index(fields=['product_is_imported'], name='idx_rawrecord_product_imported'), models.Index(fields=['price_is_imported'], name='idx_rawrecord_price_imported')],
                'constraints': [models.UniqueConstraint(fields=('import_run', 'line_number'), name='uniq_import_run_line')],
            },
        ),
    ]
